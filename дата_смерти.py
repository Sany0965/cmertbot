import telebot
import datetime
import random
import time

bot = telebot.TeleBot('–¢–û–ö–ï–ù–û–¢–ë–û–¢–§–ê–ó–ï–†')

# –ß—Ç–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω —Å–º–µ—Ä—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞
def read_death_reasons():
    with open('death_reasons.txt', 'r', encoding='utf-8') as file:
        reasons = file.readlines()
    return reasons

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—ã —Å–º–µ—Ä—Ç–∏
def predict_death(user_name):
    reasons = read_death_reasons()

    start_date = datetime.datetime(2023, 11, 6)
    end_date = datetime.datetime(2100, 1, 1)
    random_date = start_date + datetime.timedelta(seconds=random.randint(0, int((end_date - start_date).total_seconds())))

    today = datetime.datetime.now()
    delta = random_date - today
    years, days = divmod(delta.days, 365)
    months = days // 30
    days = days % 30

    formatted_date = random_date.strftime("%d %B %Y")
    time_until_death = f'{years} –≥–æ–¥(–∞/–ª–µ—Ç), {months} –º–µ—Å—è—Ü(–∞/–µ–≤), {days} –¥–µ–Ω—å(–¥–Ω–µ–π)'
    
    random_reason = random.choice(reasons).strip()
    if ',' in random_reason:
        reason_index, reason_text = random_reason.split(',')
        random_reason = reason_text.strip()

    return formatted_date, time_until_death, random_reason

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    markup = telebot.types.InlineKeyboardMarkup()
    markup.row(telebot.types.InlineKeyboardButton('–ö–æ–¥ –±–æ—Ç–∞ ü§ñ', callback_data='code'),
                telebot.types.InlineKeyboardButton('–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É —Å–º–µ—Ä—Ç–∏ üíÄ', callback_data='predict_death'))
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å–∫–∞–∂–µ—Ç –¥–∞—Ç—É –≤–∞—à–µ–π —Å–º–µ—Ä—Ç–∏.", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == 'code':
        bot.send_message(call.message.chat.id, "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ GitHub: [GitHub Repo](https://github.com/Sany0965/cmertbot) üìù", parse_mode='Markdown')
    elif call.data == 'predict_death':
        msg = bot.send_message(call.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é (–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω) üôÇ")
        bot.register_next_step_handler(msg, process_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
def process_name(message):
    try:
        user_name = message.text.lower()

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–∞—Ç—ã —Å–º–µ—Ä—Ç–∏
        formatted_date, time_until_death, random_reason = predict_death(user_name)

        result_message = f'{user_name.title()}, –≤–∞—à–∞ –¥–∞—Ç–∞ –°–º–µ—Ä—Ç–∏: {formatted_date} üíÄ\n'
        result_message += f'–í—ã –£–º—Ä—ë—Ç–µ —á–µ—Ä–µ–∑: {time_until_death} ‚è≥\n'
        result_message += f'–ü—Ä–∏—á–∏–Ω–∞: {random_reason} üò±\n'
        result_message += "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –¥–Ω—è! ‚òÄÔ∏è"
        bot.send_message(message.chat.id, result_message)
    except Exception as e:
        bot.send_message(message.chat.id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}')

if __name__ == "__main__":
    bot.polling(none_stop=True)
